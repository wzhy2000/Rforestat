cat("K-means聚类结果:\n")
print(table(kmeans_result$cluster))
hc_result <- hclust(dist_matrix, method = "ward.D2")
hc_clusters <- cutree(hc_result, k = optimal_k)
cat("层次聚类结果:\n")
print(table(hc_clusters))
ari_kmeans <- adjustedRandIndex(kmeans_result$cluster, true_cover_types)
ari_hc <- adjustedRandIndex(hc_clusters, true_cover_types)
cat("聚类算法与真实标签的ARI比较:\n")
cat("K-means ARI:", round(ari_kmeans, 3), "\n")
cat("层次聚类 ARI:", round(ari_hc, 3), "\n")
p1 <- fviz_cluster(kmeans_result, data = env_scaled,
ellipse.type = "confidence", geom = "point",
palette = "Set2", main = "K-means Clustering Results",
ggtheme = theme_minimal())
print(p1)
set.seed(123)
subsample_size <- 200
subsample_indices <- sample(nrow(env_scaled), subsample_size)
env_subsample <- env_scaled[subsample_indices, ]
hc_subsample <- hclust(dist(env_subsample), method = "ward.D2")
p2 <- fviz_dend(hc_subsample, k = optimal_k, cex = 0.8,
k_colors = "Set2", color_labels_by_k = TRUE,
main = "Hierarchical Clustering Dendrogram (Representative bsample)")
print(p2)
comparison_data <- data.frame(
PC1 = prcomp(env_scaled)$x[, 1],
PC2 = prcomp(env_scaled)$x[, 2],
K_means = as.factor(kmeans_result$cluster),
Hierarchical = as.factor(hc_clusters)
)
library(gridExtra)
p3 <- ggplot(comparison_data, aes(PC1, PC2, color = K_means)) +
geom_point(alpha = 0.7) + labs(title = "K-means") + theme_minimal()
p4 <- ggplot(comparison_data, aes(PC1, PC2, color = Hierarchical)) +
geom_point(alpha = 0.7) + labs(title = "Hierarchical") + theme_minimal()
grid.arrange(p3, p4, ncol = 2)
cluster_env_summary <- aggregate(env_features,
by = list(Cluster = kmeans_result$cluster),
FUN = mean)
library(forestat)
data(larch)
attach(larch)
dim(larch)
pr = princomp(~D + H + CW + CLR + CBH, data = larch, subset = 1:30)
summary(pr, loadings = TRUE)
head(predict(pr), n=4)
screeplot(pr, type = "lines")
biplot(pr, scale = 0.5)
library(rFIA)
install.packages("rFIA")
me_data <- readFIA("./ME_CSV")
install.packages("locfit")
BiocManager::install("edgeR")
library("splines")
library("locfit")
library(forestat)
data("larch")
data1 <- larch
attach(data1)
# 局部回归
plot(D,CW,xlim=xlims,cex=1, col="darkgrey",xlab="D",ylab="CW")
fit5.1=loess(CW~D,span=.1,data=data1)
fit5.2=loess(CW~D,span=.5,data=data1)
summary(fit5.2)
lines(x.grid,predict(fit5.1,data.frame(D=x.grid)),lwd=2,col="red")
lines(x.grid,predict(fit5.2,data.frame(D=x.grid)),lwd=2,col="blue")
# 局部回归
x.grid=seq(from=xlims[1],to=xlims[2])
library("splines")
library("locfit")
library(forestat)
data("larch")
data1 <- larch
attach(data1)
# 局部回归
xlims <- range(larch$D)
x.grid=seq(from=xlims[1],to=xlims[2])
plot(D,CW,xlim=xlims,cex=1, col="darkgrey",xlab="D",ylab="CW")
fit5.1=loess(CW~D,span=.1,data=data1)
fit5.2=loess(CW~D,span=.5,data=data1)
summary(fit5.2)
lines(x.grid,predict(fit5.1,data.frame(D=x.grid)),lwd=2,col="red")
lines(x.grid,predict(fit5.2,data.frame(D=x.grid)),lwd=2,col="blue")
legend("topright",legend=c("Span=0.2","Span=0.5"),col=c("red","blue"),lty=1,lwd=2,cex=.8)
set.seed(6)
x = seq(0, 5, length.out = 100)
data <- data.frame(
x = seq(0, 5, length.out = 100),
y = sin(x) + 0.5 + rnorm(100, sd = 0.5)
)
loess_model <- loess(y ~ x, data = data, span = 0.5)
x_value <- 2
y_fit <- predict(loess_model, newdata = data.frame(x = x_value))
slope <- predict(loess_model, newdata = data.frame(x = x_value), se = TRUE)$se.fit
par(mar = c(4, 5.2, 2, 2), mgp = c(3, 1, 0))
plot(data$x, data$y, main = "",
xlab = "X轴", ylab = "Y轴", pch = 19, col = "gray", xlim = c(0, 5), ylim = c(-2, 2), cex.lab = 2, cex.axis = 2)
points(data$x[data$x >= 1 & data$x <= 3], data$y[data$x >= 1 & data$x <= 3],
pch = 19, col = "black")
lines(data$x, predict(loess_model), col = "gray50", lwd = 2, lty = 2)
points(x_value, y_fit, pch = 17, col = "red", cex = 1.5)
slope <- predict(loess_model, newdata = data.frame(x = x_value), se = TRUE)$se.fit
intercept <- y_fit - slope * x_value
x_line <- seq(1, 3, length.out = 2) # x的取值范围从1到3
y_line <- 2.4-0.5* x_line
lines(x_line, y_line, col = "gray30", lwd = 2, lty = 3)
lines(seq(0, 10, length.out = 1000), sin(seq(0, 10, length.out = 1000))+0.5, col = "black", lwd = 2)
curve(dnorm(x, mean = 2, sd = 0.3), add = TRUE, col = "gray", lwd = 2, from = 1, to = 3)
x_seq <- seq(1, 3, length.out = 1000)
y_seq <- dnorm(x_seq, mean = 2, sd = 0.3)
polygon(c(x_seq, rev(x_seq)), c(y_seq, rep(0, length(y_seq))), col = rgb(0.5, 0.5, 0.5, 0.5), border = NA)
library(forestat)
library(dplyr)
library(MASS)
library(nlme)
###########(1)数据集划分 ###################
data(birch)
pt <- unique(birch$PLOT)
hdo.list <- lapply(pt, function(p) {
max(birch[birch$PLOT == p, "H"], na.rm = TRUE)
})
hdo.df <- data.frame(PLOT = pt, hdo = unlist(hdo.list))
data <- birch %>% left_join(hdo.df, by = "PLOT")
set.seed(123)
# 划分索引，70% 的数据用于训练
train.index <- sample(1:nrow(data), size = 0.7 * nrow(data))
# 创建训练集和测试集
train.data <- data[train.index, ]
test.data <- data[-train.index, ]
#############(2) 模型构建 ################
myInitial <- function(mCall, LHS, data, ...) {
D <- data[["D"]]
y <- data[["H"]]
hdo <- data[["hdo"]]
b1 <- max(y, na.rm = TRUE) / max(hdo, na.rm = TRUE)
b2 <- coef(lm(log(y) ~ log(hdo)))[2]
b3 <- 1 / mean(D, na.rm = TRUE)
b4 <- sd(y, na.rm = TRUE) / mean(y, na.rm = TRUE)
value <- c(b1 = b1, b2 = b2, b3 = b3, b4 = b4)
names(value) <- mCall[c("b1", "b2", "b3", "b4")]
return(value)
}
mySelfStart <- selfStart(~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4, initial = myInitial,
parameters = c("b1", "b2", "b3", "b4"))
start <- getInitial(H ~ mySelfStart(hdo = hdo, D = D, b1, b2, b3, b4), data = train.data)
deriv3.formula <- deriv3(~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4, c("b1", "b2", "b3", "b4"), function(hdo, D, b1, b2, b3, b4) NULL)
model.nls2 <- nls(H ~ deriv3.formula(hdo, D, b1, b2, b3, b4), data = train.data,
start = list(b1 = start[1], b2 = start[2], b3 = start[3], b4 = start[4]))
model.gnls2 <- gnls(H ~ deriv3.formula(hdo, D, b1, b2, b3, b4), data = train.data,
params = list(b1 ~ 1, b2 ~ 1, b3 ~ 1, b4 ~ 1),  # 指定参数结构
start = list(b1 = start[1], b2 = start[2], b3 = start[3], b4 = start[4]),
weights = varPower(form = ~ fitted(.)))
summary(model.nls2)
summary(model.gnls2)
setwd("D:/大连理工大学/R语言书稿/Rforestat/R_code(new)/chap12")
library(systemfit)
train.up5.HCB <- read.csv("data-{train.up5.hcb}-exp11-1.CSV",sep = ",", fileEncoding = "GBK")
test.up5.HCB <- read.csv("data-{test.up5.hcb}-exp11-1.CSV",sep = ",", fileEncoding = "GBK")
t.up5 <- train.up5.HCB
attach(t.up5)
NH <- H~1.3+a0*exp(-a1*exp(-a2*D))
NHCB <- HCB~H/(1+exp(b0+b1*D+b2*cw))
NCL <- CL~c0/(1+c1*exp(-c2*D))
models <- list(NH,NHCB,NCL)
startvalues <- c(a0=27.8,a1=2.85,a2=0.08,b0=2,b1=0.3,b2=0.5,c0=6,c1=3,c2=0.08)
instrument <- ~D+H+cw
m0.SUR <- nlsystemfit("SUR", models, startvalues, data=train.up5.HCB , eqnlabels=list("H","HCB","CL"))
m0.2sls <- nlsystemfit("2SLS", models, startvalues, data=train.up5.HCB,inst = instrument)
m0.3sls <- nlsystemfit("3SLS", models, startvalues, data=train.up5.HCB,inst = instrument)
summary(m0.SUR)
coefs <- rbind(m0.SUR$b, m0.2sls$b, m0.3sls$b)
rownames(coefs) <- list("SUR", "2SLS", "3SLS")
print(coefs)
print(coefs)
NH <- H ~ (c0 / (1 + c1 * exp(-c2 * D))) / (1 - 1 / (1 + exp(b0 + b1 * D + b2 * CW)))
NHCB <- HCB ~ H / (1 + exp(b0 + b1 * D + b2 * CW))
NCL <- CL ~ c0 / (1 + c1 * exp(-c2 * D))
models <- list(NH, NHCB, NCL)
startvalues <- c(b0 = 2, b1 = 0.3, b2 = 0.5, c0 = 6, c1 = 3, c2 = 0.08)
modele2.sur <- nlsystemfit("SUR", models, startvalues, data = train.up5.HCB, eqnlabels = list("H", "HCB", "CL"))
library(systemfit)
train.up5.HCB <- read.csv("data-{train.up5.hcb}-exp11-1.CSV",sep = ",", fileEncoding = "GBK")
test.up5.HCB <- read.csv("data-{test.up5.hcb}-exp11-1.CSV",sep = ",", fileEncoding = "GBK")
t.up5 <- train.up5.HCB
attach(t.up5)
NH <- H~1.3+a0*exp(-a1*exp(-a2*D))
NHCB <- HCB~H/(1+exp(b0+b1*D+b2*cw))
NCL <- CL~c0/(1+c1*exp(-c2*D))
models <- list(NH,NHCB,NCL)
startvalues <- c(a0=27.8,a1=2.85,a2=0.08,b0=2,b1=0.3,b2=0.5,c0=6,c1=3,c2=0.08)
instrument <- ~D+H+cw
m0.SUR <- nlsystemfit("SUR", models, startvalues, data=train.up5.HCB , eqnlabels=list("H","HCB","CL"))
m0.2sls <- nlsystemfit("2SLS", models, startvalues, data=train.up5.HCB,inst = instrument)
m0.3sls <- nlsystemfit("3SLS", models, startvalues, data=train.up5.HCB,inst = instrument)
summary(m0.SUR)
coefs <- rbind(m0.SUR$b, m0.2sls$b, m0.3sls$b)
rownames(coefs) <- list("SUR", "2SLS", "3SLS")
print(coefs)
NH <- H ~ (c0 / (1 + c1 * exp(-c2 * D))) / (1 - 1 / (1 + exp(b0 + b1 * D + b2 * CW)))
NHCB <- HCB ~ H / (1 + exp(b0 + b1 * D + b2 * CW))
NCL <- CL ~ c0 / (1 + c1 * exp(-c2 * D))
models <- list(NH, NHCB, NCL)
startvalues <- c(b0 = 2, b1 = 0.3, b2 = 0.5, c0 = 6, c1 = 3, c2 = 0.08)
modele2.sur <- nlsystemfit("SUR", models, startvalues, data = train.up5.HCB, eqnlabels = list("H", "HCB", "CL"))
View(train.up5.HCB)
NH <- H ~ (c0 / (1 + c1 * exp(-c2 * D))) / (1 - 1 / (1 + exp(b0 + b1 * D + b2 * cw)))
NHCB <- HCB ~ H / (1 + exp(b0 + b1 * D + b2 * cw))
NCL <- CL ~ c0 / (1 + c1 * exp(-c2 * D))
models <- list(NH, NHCB, NCL)
startvalues <- c(b0 = 2, b1 = 0.3, b2 = 0.5, c0 = 6, c1 = 3, c2 = 0.08)
modele2.sur <- nlsystemfit("SUR", models, startvalues, data = train.up5.HCB, eqnlabels = list("H", "HCB", "CL"))
print(modele1.sur.SUR$b)
print(modele2.sur$b)
print(modele1.sur$covb)
print(modele2.sur$covb)
source("exp11-1.R")
setwd("D:/大连理工大学/R语言书稿/Rforestat/R_code(new)/chap12")
source("exp11-1.R")
source("exp-12-1.R")
NH <- H~(c0 / (1 + c1 * exp(-c2 * D))) /
(1 - 1 / (1 + exp(b0 + b1 * D + b2 * cw)))
NHCB <- HCB~H / (1 + exp(b0 + b1 * D + b2 * cw))
NCL <- CL~c0 / (1 + c1 * exp(-c2 * D))
models <- list(NH, NHCB, NCL)
startvalues <- c(b0 = 2, b1 = 0.3, b2 = 0.5, c0 = 6, c1 = 3, c2 = 0.08)
m1.SUR <- nlsystemfit(
"SUR", models, startvalues,
data = train.up5.HCB, eqnlabels = list("H", "HCB", "CL")
)
print(m0.SUR$b)
print(m1.SUR$b)
print(m0.SUR$covb)
print(m1.SUR$covb)
library(ggplot2) # 调用ggplot2包
data <- data.frame(
Method = c(
rep("Simultaneous", length(m0.SUR$resids)),
rep("Additive", length(m1.SUR$resids))
),
X = c(
rep("H", length(m0.SUR$resids[, 1])),
rep("HCB", length(m0.SUR$resids[, 2])),
rep("CL", length(m0.SUR$resids[, 3])),
rep("H", length(m1.SUR$resids[, 1])),
rep("HCB", length(m1.SUR$resids[, 2])),
rep("CL", length(m1.SUR$resids[, 3]))
),
Residuals = c(
m0.SUR$resids[, 1],
m0.SUR$resids[, 2],
m0.SUR$resids[, 3],
m1.SUR$resids[, 1],
m1.SUR$resids[, 2],
m1.SUR$resids[, 3]
)
) # 将残差、对应的模型、方程整理到一个数据中
pdf("图11.1.pdf",height = 4, width = 8)
p <- ggplot(data, aes(X, Residuals, fill = Method)) +
geom_boxplot() # 绘制箱线图
p
dev.off()
View(train.up5.HCB)
library(systemfit)
train.up5.HCB <- read.csv("data-{train.up5.hcb}-exp11-1.CSV",sep = ",", fileEncoding = "GBK")
test.up5.HCB <- read.csv("data-{test.up5.hcb}-exp11-1.CSV",sep = ",", fileEncoding = "GBK")
t.up5 <- train.up5.HCB
attach(t.up5)
NH <- H~1.3+a0*exp(-a1*exp(-a2*D))
NHCB <- HCB~H/(1+exp(b0+b1*D+b2*cw))
NCL <- CL~c0/(1+c1*exp(-c2*D))
models <- list(NH,NHCB,NCL)
startvalues <- c(a0=27.8,a1=2.85,a2=0.08,b0=2,b1=0.3,b2=0.5,c0=6,c1=3,c2=0.08)
instrument <- ~D+H+cw
modele1.sur <- nlsystemfit("SUR", models, startvalues, data = train.up5.HCB, eqnlabels = list("H", "HCB", "CL"))
modele1.2sls <- nlsystemfit("2SLS", models, startvalues, data = train.up5.HCB, inst = instrument)
modele1.3sls <- nlsystemfit("3SLS", models, startvalues, data = train.up5.HCB, inst = instrument)
summary(modele1.sur)
coefs <- rbind(modele1.sur$b, modele1.2sls$b, modele1.3sls$b)
rownames(coefs) <- list("SUR", "2SLS", "3SLS")
print(coefs)
NH <- H ~ (c0 / (1 + c1 * exp(-c2 * D))) / (1 - 1 / (1 + exp(b0 + b1 * D + b2 * cw)))
NHCB <- HCB ~ H / (1 + exp(b0 + b1 * D + b2 * cw))
NCL <- CL ~ c0 / (1 + c1 * exp(-c2 * D))
models <- list(NH, NHCB, NCL)
startvalues <- c(b0 = 2, b1 = 0.3, b2 = 0.5, c0 = 6, c1 = 3, c2 = 0.08)
modele2.sur <- nlsystemfit("SUR", models, startvalues, data = train.up5.HCB, eqnlabels = list("H", "HCB", "CL"))
print(modele2.sur$b)
print(modele1.sur$b)
print(modele2.sur$b)
print(modele1.sur$covb)
print(modele2.sur$covb)
library(ggplot2)
data <- data.frame(Method = c(rep("Simultaneous", length(m0.SUR$resids)), rep("Additive", length(m1.SUR$resids))), X = c(rep("H", length(m0.SUR$resids[, 1])), rep("HCB", length(m0.SUR$resids[, 2])), rep("CL", length(m0.SUR$resids[, 3])), rep("H", length(m1.SUR$resids[, 1])), rep("HCB", length(m1.SUR$resids[, 2])), rep("CL", length(m1.SUR$resids[, 3]))), Residuals = c(m0.SUR$resids[, 1], m0.SUR$resids[, 2], m0.SUR$resids[, 3], m1.SUR$resids[, 1], m1.SUR$resids[, 2], m1.SUR$resids[, 3]))
p <- ggplot(data, aes(X, Residuals, fill = Method)) +
geom_boxplot()
library(ggplot2)
data <- data.frame(Method = c(rep("Simultaneous", length(m0.SUR$resids)), rep("Additive", length(m1.SUR$resids))), X = c(rep("H", length(m0.SUR$resids[, 1])), rep("HCB", length(m0.SUR$resids[, 2])), rep("CL", length(m0.SUR$resids[, 3])), rep("H", length(m1.SUR$resids[, 1])), rep("HCB", length(m1.SUR$resids[, 2])), rep("CL", length(m1.SUR$resids[, 3]))), Residuals = c(m0.SUR$resids[, 1], m0.SUR$resids[, 2], m0.SUR$resids[, 3], m1.SUR$resids[, 1], m1.SUR$resids[, 2], m1.SUR$resids[, 3]))
library(ggplot2)
data <- data.frame(Method = c(rep("Simultaneous", length(modele1.sur$resids)), rep("Additive", length(modele2.sur$resids))), X = c(rep("H", length(modele1.sur$resids[, 1])), rep("HCB", length(modele1.sur$resids[, 2])), rep("CL", length(modele1.sur$resids[, 3])), rep("H", length(modele2.sur$resids[, 1])), rep("HCB", length(modele2.sur$resids[, 2])), rep("CL", length(modele2.sur$resids[, 3]))), Residuals = c(modele1.sur$resids[, 1], modele1.sur$resids[, 2], modele1.sur$resids[, 3], modele2.sur$resids[, 1], modele2.sur$resids[, 2], modele2.sur$resids[, 3]))
p <- ggplot(data, aes(X, Residuals, fill = Method)) +
geom_boxplot()
p
library(systemfit)
library(forestat)
options(digits = 4)
data(picea)
attach(picea)
DBH <- D0
AGB <- STEM + BRANCH + FOLIAGE + FRUIT
colnames(picea)
library(systemfit)
library(forestat)
options(digits = 4)
data(picea)
attach(picea)
DBH <- D0
AGB <- STEM + BRANCH + FOLIAGE + FRUIT
NDBH <- DBH ~ beta1 * exp(-beta2 * LH - beta3 * CPA)
NAGB <- AGB ~ alpha1 * DBH^alpha2 * LH^alpha3
models <- list(NDBH, NAGB)
startvalues <- c(
beta1 = 1, beta2 = 0.1, beta3 = 0.1,
alpha1 = 1, alpha2 = 1, alpha3 = 0.1
)
instrument <- ~ DBH + AGB
modele3.sur <- nlsystemfit(method = "SUR", models, startvalues, data = picea)
modele3.2sls <- nlsystemfit(method = "2SLS", models, startvalues, inst = instrument, data = picea)
# 加载并处理数据
library(rattle)
data(wine)
X <- wine[, 2:ncol(wine)]
y <- wine[, 1]
set.seed(6)
train_index <- sample(1:nrow(wine), 0.7 * nrow(wine))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# 构建朴素贝叶斯模型并训练
model <- naiveBayes(X_train, as.factor(y_train))
# 加载并处理数据
library(rattle)
library(klaR)
data(wine)
X <- wine[, 2:ncol(wine)]
y <- wine[, 1]
set.seed(6)
train_index <- sample(1:nrow(wine), 0.7 * nrow(wine))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# 构建朴素贝叶斯模型并训练
model <- naiveBayes(X_train, as.factor(y_train))
library(e1071)
data(wine)
X <- wine[, 2:ncol(wine)]
y <- wine[, 1]
set.seed(6)
train_index <- sample(1:nrow(wine), 0.7 * nrow(wine))
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]
# 构建朴素贝叶斯模型并训练
model <- naiveBayes(X_train, as.factor(y_train))
print(model)
library("systemfit")
data(ppine)
hg.log.formula <- log(hg) ~ log(tht) + tht^2 + elev + cr
dg.log.formula <- log(dg) ~ log(dbh) + hg + cr + ba
labels <- list("height.log", "diameter.log")
inst <- ~ log(tht) + log(dbh) + elev + cr + ba
library("systemfit")
data(ppine)
hg.log.formula <- log(hg) ~ log(tht) + tht^2 + elev + cr
dg.log.formula <- log(dg) ~ log(dbh) + hg + cr + ba
labels <- list("height.log", "diameter.log")
inst <- ~ log(tht) + log(dbh) + elev + cr + ba
options(digits = 5)
model <- list(hg.log.formula, dg.log.formula)
model.ols <- systemfit( model, "OLS", data = ppine)
model.sur <- systemfit( model, "SUR", data = ppine)
print(model.ols)
print(model.sur)
summary(model.ols$eq[[1]])
summary(model.ols$eq[[2]])
model.2sls <- systemfit( model, "2SLS", data = ppine, inst=inst)
print(model.2sls)
model.3sls <- systemfit( model, "3SLS", data = ppine, inst=inst)
summary(model.3sls)
R.restr <- matrix(0, 1, 10)
R.restr[1, 5] <- 1
R.restr[1, 9] <- -1
q.restr <- c(0)
model.ols2 <- systemfit( model, "OLS", data = ppine, restrict.matrix = R.restr, restrict.rhs = q.restr)
print(model.ols2)
hg.formula <- hg ~ exp(h0 + h1 * log(tht) + h2 * tht^2 + h3 * elev + h4 * cr)
dg.formula <- dg ~ exp(d0 + d1 * log(dbh) + d2 * hg + d3 * cr + d4 * ba)
labels <- list("height.growth", "diameter.growth")
inst <- ~ tht + dbh + elev + cr + ba
start.values <- c(h0 = -0.5, h1 = 0.5, h2 = -0.001, h3 = 0.0001, h4 = 0.08,
d0 = -0.5, d1 = 0.009, d2 = 0.25, d3 = 0.005, d4 = -0.02)
model <- list(hg.formula, dg.formula)
nmodel.2sls <- nlsystemfit("2SLS", model, start.values, data = ppine,
eqnlabels = labels, inst = inst)
summary(nmodel.2sls)
cbind(b = nmodel.2sls$b, se = nmodel.2sls$se, t = nmodel.2sls$t, p = nmodel.2sls$p)
ypred.2sls <- predict(model.2sls, data=ppine)
ypred.ols <- predict(model.ols, data=ppine)
diff <- ypred.2sls - ypred.ols
summary(diff)
predict.nlsystemfit <- function(model, new_data) {
coefs <- model$b
new_data$hg <- exp(coefs["h0"] + coefs["h1"] * log(new_data$tht) + coefs["h2"] *
new_data$tht^2 + coefs["h3"] * new_data$elev + coefs["h4"] * new_data$cr)
new_data$dg <- exp(coefs["d0"] + coefs["d1"] * log(new_data$dbh) + coefs["d2"] *
new_data$hg + coefs["d3"] * new_data$cr + coefs["d4"] * new_data$ba)
return(new_data[, c("hg", "dg")])
}
ypred.2sls <- predict.nlsystemfit(nmodel.2sls, ppine)
summary(ppine[c("hg", "dg")] - ypred.2sls )
restrict1 <- "eq2_cr  -  eq1_cr = 0"
linearHypothesis(model.ols, restrict1)
hausman.systemfit(model.2sls, model.3sls)
setwd("D:/大连理工大学/R语言书稿/Rforestat/R_code(new)/chap13")
library(e1071)
train.data <- read.csv("training.csv", sep = ",")
set.seed(123)
x.train <- train.data[, 2:(ncol(train.data))]
y.train <- train.data[, 1]
test.data <- read.csv("testing.csv", sep = ",")
x.test <- test.data[, 2:(ncol(test.data))]
y.test <- test.data[, 1]
model <- naiveBayes(x.train, as.factor(y.train))
y.pred <- predict(model, x.test)
accuracy <- mean(y.pred == y.test)
cat("Model Accuracy:", round(accuracy, 2), "\n")
library(caret)
cm <- confusionMatrix(as.factor(y.pred), as.factor(y.test))
print(cm)
library(forestat)
data("larch")
prior.lm <- set_prior("normal(0, 10)", class = "b")
install.packages("brms")
library(brm)
library(brms)
data("larch")
prior.lm <- set_prior("normal(0, 10)", class = "b")
formula.lm <- CW ~ CLR + SD + I(D^2)
model.lm <- brm(formula = formula.lm, data = larch, prior = prior.lm, chains = 4,
cores = 4)
model.nlm <- brm(bf(CW ~ p * (a1 + a2 * CLR)/(1 + b1 * exp(-(c1 + c2 * SD) * D)), p ~ 1 + (1 | PLOT), a1 ~ 1, a2 ~ 1, b1 ~ 1, c1 ~ 1, c2 ~ 1, nl = TRUE), data = larch, iter = 4000, warmup = 2000, control = list(adapt_delta = 0.95), chains = 4, cores = 4)
library(forestat)
library(brms)
data("larch")
prior.lm <- set_prior("normal(0, 10)", class = "b")
formula.lm <- CW ~ CLR + SD + I(D^2)
model.lm <- brm(formula = formula.lm, data = larch, prior = prior.lm, chains = 4,
cores = 4)
model.nlm <- brm(bf(CW ~ p * (a1 + a2 * CLR)/(1 + b1 * exp(-(c1 + c2 * SD) * D)), p ~ 1 + (1 | PLOT), a1 ~ 1, a2 ~ 1, b1 ~ 1, c1 ~ 1, c2 ~ 1, nl = TRUE), data = larch, iter = 4000, warmup = 2000, control = list(adapt_delta = 0.95), chains = 4, cores = 4)
waic.res <- waic(model.lm)
print(waic.res)
bayesr2.res <- bayes_R2(model.lm)
print(bayesr2.res)
ypred.lm <- predict(model.lm, newdata = larch)
ypred.nlm <- predict(model.nlm, newdata = larch)
ppred.lm <- posterior_predict(model.lm, newdata = larch)
ppred.nlm <- posterior_predict(model.nlm, newdata = larch)
error <- colMeans(ppred.lm)- colMeans(ppred.lm)
p <- ggplot(data.frame(error), aes(x = error)) +
geom_density(fill = "blue", alpha = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
labs(x = "预测误差", y = "密度") +
theme_minimal() +
theme(text = element_text(family = "SimSun"),
axis.title.x = element_text(size = 19),
axis.title.y = element_text(size = 19),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18))
library(ggplot2)
p <- ggplot(data.frame(error), aes(x = error)) +
geom_density(fill = "blue", alpha = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
labs(x = "预测误差", y = "密度") +
theme_minimal() +
theme(text = element_text(family = "SimSun"),
axis.title.x = element_text(size = 19),
axis.title.y = element_text(size = 19),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18))
plot(p)
linpred.lm <- posterior_linpred(model.lm, newdata = larch)
head(linpred.lm)
linpred.nlm <- posterior_linpred(model.nlm, newdata = larch)
head(linpred.nlm)
hypothesis(model.lm, "CLR = 0")
hypothesis(model.nlm, "c1_Intercept > c2_Intercept")
hypothesis(model.nlm, "b1_Intercept > 0")
pp_check(model.lm, nsamples = 100)
pp_check(model.nlm, nsamples = 100)
mcmc_plot(model.lm, type = "trace")
mcmc_plot(model.nlm, type = "trace")
plot(model.lm, variable = "b_CLR")
plot(model.nlm, variable = "b_a1_Intercept")
conditional_effects(model.lm, effects = "CLR")
conditional_effects(model.nlm, effects = "CLR")
data(forestat)
library(forestat)
data(forestData)
force(forestData)
