plot(newd$x0, pred, type = "l", col = "black", lwd = 2,
main = "Prediction Results", xlab = "x0", ylab = "Predicted Values",
col.axis = "black", col.lab = "black", col.main = "black")
?ti
?s
plot.gam(x, residuals=FALSE, rug=NULL, se=TRUE, pages=0, select=NULL, scale=-1, n=100, n2=40, n3=3, theta=30, phi=30, jit=FALSE, xlab=NULL, ylab=NULL, main=NULL, ylim=NULL, xlim=NULL, too.far=0.1, all.terms=FALSE, shade=FALSE, shade.col="gray80", shift=0, trans=I, seWithMean=FALSE, unconditional=FALSE, by.resids=FALSE, scheme=0, ...)
library(mgcv)
set.seed(6)
n <- 200
sig <- 2
dat <- gamSim(1, n = n, scale = sig)
b <- gam(y ~ s(x0) + s(I(x1^2)) + s(x2) + offset(x3), data = dat)
newd <- data.frame(x0 = (0:30) / 30, x1 = (0:30) / 30, x2 = (0:30) / 30, x3 = (0:30) / 30)
pred <- predict.gam(b, newd)
pred0 <- predict(b, newd, exclude = "s(x0)")
head(pred)
head(pred0)
plot(newd$x0, pred, type = "l", col = "black", lwd = 2,
main = "Prediction Results", xlab = "x0", ylab = "Predicted Values",
col.axis = "black", col.lab = "black", col.main = "black")
plot.gam(x, residuals=FALSE, rug=NULL, se=TRUE, pages=0, select=NULL, scale=-1, n=100, n2=40, n3=3, theta=30, phi=30, jit=FALSE, xlab=NULL, ylab=NULL, main=NULL, ylim=NULL, xlim=NULL, too.far=0.1, all.terms=FALSE, shade=FALSE, shade.col="gray80", shift=0, trans=I, seWithMean=FALSE, unconditional=FALSE, by.resids=FALSE, scheme=0, ...)
library(forestat)
data("larch")
force(larch)
View(larch)
library(forestat)
library(mgcv)
data("larch")
attach(larch)
model <- gam(H ~ s(D) + s(Hdom) + te(D, Hdom), data = larch, method = "REML", select = TRUE)
model <- gam(H ~ s(D) + s(Hdom) + te(D, CBH), data = larch, method = "REML", select = TRUE)
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method = "REML", select = TRUE)
summary(model)
gam.check(model, pch = 19, cex = .3)
?gam.check
plot(model,pages=1)
gam.check(model, pch = 19, cex = .3)
plot(model,pages=1)
gam.check(model)
?gam
library(forestat)
library(mgcv)
data("larch")
attach(larch)
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method="GCV.Cp", select = TRUE)
summary(model)
?t2
?gam
?predict.gam
?plot.gam
?gam.check
library(mgcv)
# 生成模拟数据集
set.seed(0)
dat <- gamSim(1, n = 200, scale = 2)
# 拟合广义加性模型
b <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat)
# 生成诊断图
gam.check(b, pch = 19, cex = .5)
# 加载所需包
library(mgcv)
# 生成模拟数据集
set.seed(0)
dat <- gamSim(1, n = 200, scale = 2)
# 拟合广义加性模型
b <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat)
# 保存 gam.check 生成的诊断图为 PDF 文件
pdf("gam_check_plot.pdf", width = 8, height = 6, bg = "white")
# 生成诊断图
gam.check(b, pch = 19, cex = .5)
dev.off()  # 关闭图像设备，保存文件
getwd()
?gamSim
# 加载所需包
library(mgcv)
# 生成模拟数据集
set.seed(0)
dat <- gamSim(1, n = 200, scale = 2)
# 拟合广义加性模型
b <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat)
# 保存 gam.check 生成的诊断图为 PDF 文件
pdf("gam_check_plot.pdf", width = 8, height = 6, bg = "white")
par(mfrow = c(2, 2))
# 生成诊断图
gam.check(b, pch = 19, cex = .5)
dev.off()  # 关闭图像设备，保存文件
?cv.gam
?cv.gam
??cv.gam
# 加载所需包
library(mgcv)
# 生成模拟数据集
dat <- gamSim(1, n = 200, scale = 2)
# 拟合广义加性模型
b <- gam(y ~ s(x0) + s(I(x1^2)) + s(x2) + offset(x3), data = dat)
# 生成新数据集，用于预测
newd <- data.frame(
x0 = (0:30) / 30,
x1 = (0:30) / 30,
x2 = (0:30) / 30,
x3 = (0:30) / 30 # 注意：这里确保 x3 是一个有效的数值列
)
# 生成预测值
pred <- predict.gam(b, newd)
# 生成不包含 s(x0) 的预测值
pred0 <- predict(b, newd, exclude = "s(x0)")
# 保存图像为黑白调，适合书籍打印
pdf("predict_plot_bw.pdf", width = 8, height = 6, bg = "white")  # 背景设为白色
# 绘制黑白线条图，横纵坐标为英文
plot(newd$x0, pred, type = "l", col = "black", lwd = 2,
main = "Prediction Results", xlab = "x0", ylab = "Predicted Values",
col.axis = "black", col.lab = "black", col.main = "black")
dev.off()
library(gamreg)
# 加载所需包
library(mgcv)
# 生成模拟数据集
n <- 200
sig <- 2
dat <- gamSim(1, n = n, scale = sig)
# 拟合广义加性模型
b <- gam(y ~ s(x0) + s(I(x1^2)) + s(x2) + offset(x3), data = dat)
# 生成新数据集，用于预测
newd <- data.frame(
x0 = (0:30) / 30,
x1 = (0:30) / 30,
x2 = (0:30) / 30,
x3 = (0:30) / 30 # 注意：这里确保 x3 是一个有效的数值列
)
# 生成预测值
pred <- predict.gam(b, newd)
# 生成不包含 s(x0) 的预测值
pred0 <- predict(b, newd, exclude = "s(x0)")
head(pred)
head(pred0)
# 保存图像为黑白调，适合书籍打印
pdf("predict_plot_bw.pdf", width = 8, height = 6, bg = "white")  # 背景设为白色
# 绘制黑白线条图，横纵坐标为英文
plot(newd$x0, pred, type = "l", col = "black", lwd = 2,
main = "Prediction Results", xlab = "x0", ylab = "Predicted Values",
col.axis = "black", col.lab = "black", col.main = "black")
dev.off()
library(mvtnorm)
library("gamreg")
n <- 30
p <- 10
epsilon <- 0.1
beta0 <- 0.0
beta <- c(numeric(p))
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p))
X <- rmvnorm(n, sigma=Sigma)
e <- rnorm(n)
i <- 1:ceiling(epsilon*n)
e[i] <- e[i] + 20
Y <- beta0*(numeric(n)+1) + X%*%beta
res <- cv.gam(X, Y, nlambda = 5, nlambda.LTS = 20, init.mode = "sLTS")
print(res)
library(mvtnorm)
library("gamreg")
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       #
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
?sapply
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
View(Sigma)
library(mvtnorm)
library("gamreg")
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 协方差矩阵
e <- rnorm(n)               # 随机误差项
i <- 1:ceiling(epsilon*n)    # 增加离群点
e[i] <- e[i] + 20
numeric(n)
library(mvtnorm)
library("gamreg")
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 协方差矩阵
e <- rnorm(n)               # 随机误差项
i <- 1:ceiling(epsilon*n)    # 增加离群点
e[i] <- e[i] + 20
Y <- beta0*(numeric(n)+1) + X%*%beta
res <- cv.gam(X, Y, nlambda = 5, nlambda.LTS = 20, init.mode = "sLTS")
print(res)
library(mvtnorm)
library("gamreg")
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 协方差矩阵
e <- rnorm(n)               # 随机误差项
i <- 1:ceiling(epsilon*n)    # 增加离群点
e[i] <- e[i] + 20
Y <- beta0*(numeric(n)+1) + X%*%beta + e
res <- cv.gam(X, Y, nlambda = 5, nlambda.LTS = 20, init.mode = "sLTS")
print(res)
View(Y)
library(mvtnorm)
library("gamreg")
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 协方差矩阵
e <- rnorm(n)               # 随机误差项
i <- 1:ceiling(epsilon*n)    # 增加离群点
e[i] <- e[i] + 20
Y <- beta0*(numeric(n)+1) + X%*%beta
res <- cv.gam(X, Y, nlambda = 5, nlambda.LTS = 20, init.mode = "sLTS")
print(res)
library(mvtnorm)
library("gamreg")
set.seed(6)
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 协方差矩阵
e <- rnorm(n)               # 随机误差项
i <- 1:ceiling(epsilon*n)    # 增加离群点
e[i] <- e[i] + 20
Y <- beta0*(numeric(n)+1) + X%*%beta
res <- cv.gam(X, Y, nlambda = 5, nlambda.LTS = 20, init.mode = "sLTS")
print(res)
View(Y)
library(mvtnorm)
library("gamreg")
set.seed(6)
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 协方差矩阵
e <- rnorm(n)               # 随机误差项
i <- 1:ceiling(epsilon*n)    # 增加离群点
e[i] <- e[i] + 20
Y <- beta0*(numeric(n)+1) + X%*%beta + e
res <- cv.gam(X, Y, nlambda = 5, nlambda.LTS = 20, init.mode = "sLTS")
print(res)
X%*%beta
library(mvtnorm)
library("gamreg")
set.seed(6)
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 协方差矩阵
e <- rnorm(n)               # 随机误差项
i <- 1:ceiling(epsilon*n)    # 增加离群点
e[i] <- e[i] + 20
Y <- beta0*(numeric(n)+1) + X%*%beta + e
res <- cv.gam(X, Y, nlambda = 5, nlambda.LTS = 20, init.mode = "sLTS")
print(res)
library(mvtnorm)
library("gamreg")
set.seed(6)
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 协方差矩阵
e <- rnorm(n)               # 随机误差项
i <- 1:ceiling(epsilon*n)    # 增加离群点
e[i] <- e[i] + 20
Y <- beta0*(numeric(n)+1) + X%*%beta + e
res <- cv.gam(X, Y, nlambda = 5, nlambda.LTS = 20, init.mode = "sLTS")
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method="RSME", select = TRUE)
?GAM
?gam
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method="REML", select = TRUE)
summary(model)
plot(model,pages=1)
par(mfrow = c(2, 2))
gam.check(model, pch = 19, cex = .5)
plot(model,pages=1)
plot(model,residuals = TRUE,pages=1)
# 利用胸径（D）和枝下高（CBH）构建树高模型
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method="REML", select = TRUE)
library(forestat)
library(mgcv)
library(gamreg)
data("larch")
attach(larch)
# 利用胸径（D）和枝下高（CBH）构建树高模型
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method="REML", select = TRUE)
summary(model)
plot(model,pages=1)
par(mfrow = c(2, 2))
gam.check(model, pch = 19, cex = .5)
gam.check(model, pch = 19, cex = .5)
Y <- H  # 响应变量：树高
X <- as.matrix(larch[, c("D", "CBH")])  # 预测变量矩阵，包括胸径和枝下高
# 运行交叉验证
res <- cv.gam(
X = X,
Y = Y,
nlambda = 10,        # 惩罚参数网格数
init.mode = "sLTS",  # 初始化方法
fold = 5,            # 5 折交叉验证
lmin = 0.01,         # 惩罚参数的最小值
lmax = 1             # 惩罚参数的最大值
)
library(mvtnorm)
library("gamreg")
set.seed(6)
n <- 30                  # 样本量
p <- 10                  # 预测变量数量
epsilon <- 0.1           #  离群点比例
beta0 <- 0.0                # 截距
beta <- c(numeric(p))       # 回归系数
beta[1] <- 1
beta[2] <- 2
beta[3] <- 3
beta[4] <- 4
Sigma <- 0.2^t(sapply(1:p, function(i, j) abs(i-j), 1:p)) # 构造p*p的协方差矩阵
X <- rmvnorm(n, sigma=Sigma) # 生成n个来自多元正态分布的随机样本
class(X)
View(X)
library(forestat)
library(mgcv)
library(gamreg)
data("larch")
attach(larch)
# 利用胸径（D）和枝下高（CBH）构建树高模型
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method="REML", select = TRUE)
summary(model)
plot(model,pages=1)
par(mfrow = c(2, 2))
gam.check(model, pch = 19, cex = .5)
Y <- H  # 响应变量：树高
X <- as.matrix(larch[, c("D", "CBH")])  # 预测变量矩阵，包括胸径和枝下高
# 运行交叉验证
res <- cv.gam(
X = X,
Y = Y,
nlambda = 10,        # 惩罚参数网格数
init.mode = "sLTS",  # 初始化方法
fold = 5,            # 5 折交叉验证
lmin = 0.01,         # 惩罚参数的最小值
lmax = 1             # 惩罚参数的最大值
)
Y <- as.matrix(H)  # 响应变量：树高
X <- as.matrix(larch[, c("D", "CBH")])  # 预测变量矩阵，包括胸径和枝下高
# 运行交叉验证
res <- cv.gam(
X = X,
Y = Y,
nlambda = 10,        # 惩罚参数网格数
init.mode = "sLTS",  # 初始化方法
fold = 5,            # 5 折交叉验证
lmin = 0.01,         # 惩罚参数的最小值
lmax = 1             # 惩罚参数的最大值
)
library(forestat)
library(mgcv)
library(gamreg)
data("larch")
attach(larch)
# 利用胸径（D）和枝下高（CBH）构建树高模型
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method="REML", select = TRUE)
summary(model)
plot(model,pages=1)
getwd()
pdf("smooth_effect.pdf",width = 8,height = 6)
plot(model,pages=1)
dev.off()
pdf("check.pdf",width = 8,height = 6)
par(mfrow = c(2, 2))
gam.check(model, pch = 19, cex = .5)
dev.off()
plot(model,pages=1,scheme = 2)
plot(model,pages=1,scheme = 1)
plot(model,pages=1,scheme = 0)
plot(model,pages=1,scheme = 1)
plot(model,pages=1,scheme = 3)
plot(model,pages=1,scheme = 0)
plot(model,pages=1,scheme = 2)
cv.gam(X = X,Y = Y,nlambda = 10, init.mode = "sLTS",fold = 5,lmin = 0.01,lmax = 1)
best_lambda <- res$Rocv$lambda
print(paste("最佳惩罚参数 λ:", best_lambda))
library(forestat)
library(mgcv)
library(gamreg)
data("larch")
attach(larch)
# 利用胸径（D）和枝下高（CBH）构建树高模型
model <- gam(H ~ s(D) + s(CBH) + te(D, CBH), data = larch, method="REML", select = TRUE)
summary(model)
pdf("smooth_effect.pdf",width = 8,height = 6)
pdf("smooth_effect.pdf",width = 8,height = 6)
plot(model,pages=1,scheme = 2)
dev.off()
pdf("check.pdf",width = 8,height = 6)
par(mfrow = c(2, 2))
gam.check(model, pch = 19, cex = .5)
dev.off()
Y <- as.matrix(H)  # 响应变量：树高
X <- as.matrix(larch[, c("D", "CBH")])  # 预测变量矩阵，包括胸径和枝下高
# 运行交叉验证
res <- cv.gam(
X = X,
Y = Y,
nlambda = 10,        # 惩罚参数网格数
init.mode = "sLTS",  # 初始化方法
fold = 5,            # 5 折交叉验证
lmin = 0.01,         # 惩罚参数的最小值
lmax = 1             # 惩罚参数的最大值
)
best_lambda <- res$Rocv$lambda
print(paste("最佳惩罚参数 λ:", best_lambda))
res$Rocv
View(res)
res
Y <- as.matrix(H)  # 响应变量：树高
X <- as.matrix(larch[, c("D", "CBH")])  # 预测变量矩阵，包括胸径和枝下高
# 运行交叉验证
res <- cv.gam(
X = X,
Y = Y,
nlambda = 10,        # 惩罚参数网格数
init.mode = "sLTS",  # 初始化方法
fold = 5,            # 5 折交叉验证
lmin = 0.01,         # 惩罚参数的最小值
lmax = 1             # 惩罚参数的最大值
)
print(res)
View(res)
res$Rocv
res$lambda
res$fit$sigma
sigma <- sapply(res$fit, function(x) x$sigma)
# 提取残差标准差和回归系数
lambda <- res$lambda
sigma <- sapply(res$fit, function(x) x$sigma)
beta1 <- sapply(res$fit, function(x) x$beta[1, 1])  # D 的系数
beta2 <- sapply(res$fit, function(x) x$beta[2, 1])  # CBH 的系数
# 绘制残差标准差与惩罚参数的关系
plot(lambda, sigma, type = "b", log = "x", col = "blue",
xlab = "惩罚参数 λ (对数刻度)", ylab = "残差标准差 σ",
main = "惩罚参数与残差标准差的关系")
# 绘制回归系数与惩罚参数的关系
plot(lambda, beta1, type = "b", col = "red", log = "x",
xlab = "惩罚参数 λ (对数刻度)", ylab = "回归系数",
main = "惩罚参数与回归系数的关系")
lines(lambda, beta2, type = "b", col = "green")
legend("topright", legend = c("胸径 (D)", "枝下高 (CBH)"),
col = c("red", "green"), lty = 1, bty = "n")
