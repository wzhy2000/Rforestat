summary(fit)
data <- read.csv("dog1.csv")
data_long_dog <- data %>%
pivot_longer(
cols = c(p1, p2, p3, p4),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
fit <- aov(Height ~ treat * time + Error(dog/(treat * time)), data = data_long_dog)
summary(fit)
fit <- aov(Height ~ treat * time + Error(dog/(time)), data = data_long_dog)
summary(fit)
View(data)
data <- read.csv("dog1.csv")
data_long_dog <- data %>%
pivot_longer(
cols = c(p1, p2, p3, p4),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
head(data_long_dog)
fit <- aov(Height ~ treat * time + Error(dog/(treat * time)), data = data_long_dog)
data <- read.csv("dog1.csv")
data_long_dog <- data %>%
pivot_longer(
cols = c(p1, p2, p3, p4),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
head(data_long_dog)
fit <- aov(Height ~ treat * time + Error(dog/(treat * time)), data = data_long_dog)
summary(fit)
#################dog
library(lmer4)
#################dog
library(lme4)
data <- read.csv("dog1.csv")
View(data)
model <- lmer(Height ~ treat * time + (1 | dog), data = data_long_dog)
summary(model)
anova.out.3
anova.out.3 <- anova(lmer(Height ~ time + (1|subject),data = data2))
model <- lmer(Height ~ treat * time + (1 | dog), data = data_long_dog)
anova_table <- anova(model)
anova_table
model <- lmer(Height ~ treat * time + (1|treat:dog), data = data_long_dog)
anova(model)
library(lme4); library(lmerTest); library(emmeans)
library(dplyr); library(performance); library(ggplot2)
library(broom.mixed)
####################### another
data <- read.csv(https://raw.githubusercontent.com/IdahoAgStats/mixed-models-in-R/main/data/aberdeen2015.csv)
####################### another
data <- read.csv("https://raw.githubusercontent.com/IdahoAgStats/mixed-models-in-R/main/data/aberdeen2015.csv")
View(data)
height_data <- readxl::read_excel(here::here("data", "height_data.xlsx"))
View(data)
View(data_long_dog)
model_lme <- lme(Height ~ time * treat, random = ~ 1 | dog/time, data = data_long_dog)
library(k,e)
library(lme)
library(nlme)
model_lme <- lme(Height ~ time * treat, random = ~ 1 | dog/time, data = data_long_dog)
summary(model_lme)
anova(model_lme, type = "marginal")
anova(model_lme)
data_long_dog$treat <- as.factor(data_long_dog$treat)
data_long_dog$dog <- as.factor(data_long_dog$dog)
data_long_dog$time <- as.factor(data_long_dog$time)
model_lme <- lme(Height ~ time * treat, random = ~ 1 | dog/time, data = data_long_dog)
anova(model_lme, type = "marginal")
fit <- aov(Height ~ treat * time + Error(dog/(treat * time)), data = data_long_dog)
summary(fit)
model_lme <- lme(Height ~ time * treat, random = ~ 1 | dog/time, data = data_long_dog)
anova(model_lme, type = "marginal")
library(lme4)
data <- read.csv("dog1.csv")
data_long_dog <- data %>%
pivot_longer(
cols = c(p1, p2, p3, p4),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
head(data_long_dog)
data_long_dog$treat <- as.factor(data_long_dog$treat)
data_long_dog$dog <- as.factor(data_long_dog$dog)
data_long_dog$time <- as.factor(data_long_dog$time)
fit <- aov(Height ~ treat * time + Error(dog/(treat * time)), data = data_long_dog)
summary(fit)
View(data_long_dog)
data <- read.csv("data-eg.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long$time)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
data <- read.csv("data-eg.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
summary(fit)
data <- read.csv("data-eg.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
summary(fit)
library(lme4)
data <- read.csv("dog1.csv")
data_long_dog <- data %>%
pivot_longer(
cols = c(p1, p2, p3, p4),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
head(data_long_dog)
data_long_dog$treat <- as.factor(data_long_dog$treat)
data_long_dog$dog <- as.factor(data_long_dog$dog)
data_long_dog$time <- as.factor(data_long_dog$time)
fit <- aov(Height ~ treat * time + Error(dog/(treat * time)), data = data_long_dog)
summary(fit)
library(tidyr)
#####################################
data <- read.csv("data-eg.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
summary(fit)
#################dog
library(lme4)
data <- read.csv("dog1.csv")
data_long_dog <- data %>%
pivot_longer(
cols = c(p1, p2, p3, p4),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
head(data_long_dog)
data_long_dog$treat <- as.factor(data_long_dog$treat)
data_long_dog$dog <- as.factor(data_long_dog$dog)
data_long_dog$time <- as.factor(data_long_dog$time)
fit <- aov(Height ~ treat * time + Error(dog/(treat * time)), data = data_long_dog)
summary(fit)
data <- read.csv("data-eg.csv")
data
#####################################
data <- read.csv("data-eg.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
summary(fit)
data <- read.csv("data-eg.csv")
attach(data)
fit1 <- aov(Height0 ~ plot)  # 方差分析
summary(fit1)
table(plot) # 计数
# 将plot声明为因子，视为协方差分析中的处理效应
# tree.age为连续变量，视为协变量
plot <- as.factor(plot)
fit2 <-aov(Height0 ~ plot + DBH) # 协方差分析
summary(fit2)
data <- read.csv("data-eg.csv")
attach(data)
fit1 <- aov(Height0 ~ plot)  # 方差分析
summary(fit1)
table(plot) # 计数
# 将plot声明为因子，视为协方差分析中的处理效应
# tree.age为连续变量，视为协变量
plot <- as.factor(plot)
fit2 <-aov(Height0 ~ plot + DBH) # 协方差分析
summary(fit2)
data
library(tidyr)
#####################################
data <- read.csv("data-eg.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
summary(fit)
data <- read.csv("data-eg.csv")
attach(data)
fit1 <- aov(Height0 ~ plot)  # 方差分析
summary(fit1)
table(plot) # 计数
# 将plot声明为因子，视为协方差分析中的处理效应
# tree.age为连续变量，视为协变量
plot <- as.factor(plot)
fit2 <-aov(Height0 ~ plot + DBH) # 协方差分析
summary(fit2)
library(tidyr)
#####################################
data <- read.csv("data-eg.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
summary(fit)
data <- read.csv("dog1.csv")
data_long_dog <- data %>%
pivot_longer(
cols = c(p1, p2, p3, p4),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
head(data_long_dog)
data_long_dog$treat <- as.factor(data_long_dog$treat)
data_long_dog$dog <- as.factor(data_long_dog$dog)
data_long_dog$time <- as.factor(data_long_dog$time)
fit <- aov(Height ~ treat * time + Error(dog/(treat * time)), data = data_long_dog)
summary(fit)
fit <- aov(Height ~ treat * time + Error(dog/(time)), data = data_long_dog)
summary(fit)
data <- read.csv("data-eg.csv")
attach(data)
fit1 <- aov(Height0 ~ plot)  # 方差分析
summary(fit1)
table(plot) # 计数
# 将plot声明为因子，视为协方差分析中的处理效应
# tree.age为连续变量，视为协变量
plot <- as.factor(plot)
fit2 <-aov(Height0 ~ plot + DBH) # 协方差分析
summary(fit2)
data <- read.csv("data-eg.csv")
attach(data)
fit1 <- aov(Height0 ~ plot)  # 方差分析
summary(fit1)
table(plot) # 计数
# 将plot声明为因子，视为协方差分析中的处理效应
# tree.age为连续变量，视为协变量
plot <- as.factor(plot)
fit2 <-aov(Height0 ~ plot + DBH) # 协方差分析
summary(fit2)
qf(0.95, 1, 3)
qf(0.95, 3, 11)
qf(0.95, 3, 69)
qf(0.95, 1, 3)
summary(fit1)
plot <- as.factor(plot)
fit2 <-aov(Height0 ~ plot + DBH) # 协方差分析
summary(fit2)
#####################################
data <- read.csv("data-eg.csv")
head(data)
data
library(tidyr)
#####################################
data <- read.csv("data-eg.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
summary(fit)
qf(0.95, 3, 12)
qf(0.95, 2, 2)
qf(0.95, 2, 24)
qf(0.95, 2, 6)
qf(0.95, 6, 24)
qf(0.95, 1, 3)
#####################################
data <- read.csv("data-{eg4-10}.csv")
data <- read.csv("data-{eg4-10}.csv")
head(data)
# 将数据转换为长格式
data_long_tree <- data %>%
pivot_longer(
cols = c(Height0, Height.after.3.years, Height.after.6.years),  # 需要转换的列
names_to = "time",       # 新列名称，用来存储原始列名（表示时间）
values_to = "Height"     # 新列名称，用来存储高度值
)
data_long_tree <- data_long_tree[, c("plot", "sampleid", "time", "Height")]
data_long_tree$plot <- as.factor(data_long_tree$plot)
data_long_tree$sampleid <- as.factor(data_long_tree$sampleid)
data_long_tree$time <- as.factor(data_long_tree$time)
fit <- aov(Height ~ plot * time + Error(sampleid/(plot * time)), data = data_long_tree)
summary(fit)
View(data_long_tree)
# t
t <- nlevels(data_long$time)
# a
a <- length(unique(data_long_tree$plot))
# t
t <- nlevels(data_long_tree$time)
# bar{y}
mean <- mean(data_long_tree$Height)
# 计算 y_i.. (plot的均值)
plot_means <- aggregate(Height ~ plot, data = data_long_tree, FUN = base::mean)
# 计算 y_..k (time的均值)
time_means <- aggregate(Height ~ time, data = data_long_tree, FUN = base::mean)
# 计算 y_ij. (每个plot中每个样本点的均值)
plot_sample_means <- aggregate(Height ~ plot + sample, data = data_long_tree, FUN = base::mean)
# 计算 y_ij. (每个plot中每个样本点的均值)
plot_sample_means <- aggregate(Height ~ plot + sampleid, data = data_long_tree, FUN = base::mean)
# 计算y_i.k
plot_time_means <- aggregate(Height ~ plot + time, data = data_long_tree, FUN = base::mean)
# SS_T (总平方和)
SS_T <- sum(data_long$Height^2) - N * t * mean^2
SS_T
# SS_T (总平方和)
SS_T <- sum(data_long_tree$Height^2) - N * t * mean^2
SS_T
# N
N <- 16
# SS_T (总平方和)
SS_T <- sum(data_long_tree$Height^2) - N * t * mean^2
SS_T
# SS_A (plot的平方和)
SS_A <- t * sum(plot_means$Height^2) - N * t * mean^2
SS_A
# SS_A (plot的平方和)
SS_A <- t * sum(plot_means$Height^2) - N  * mean^2
SS_A
data_long_tree$Height
# SS_T (总平方和)
SS_T <- sum(data_long_tree$Height^2) - N * t * mean^2
SS_T
# SS_A (plot的平方和)
SS_A <- t * sum(plot_means$Height^2) - N * t * mean^2
SS_A
# SS_A (plot的平方和)
SS_A <- t * sum(4 * plot_means$Height^2) - N * t * mean^2
SS_A
# SS_E(A)
SS_EA <- t * sum(plot_sample_means$Height^2) - t * sum(4 * plot_means$Height^2)
SS_EA
# SS_B
SS_B <- N * sum(time_means$Height^2) - N * t * mean^2
SS_B
# SS_AB
SS_AB <- sum(plot_time_means$Height^2) - N * t * mean^2 - SS_A - SS_B
SS_AB
# SS_AB
SS_AB <- sum(4 * plot_time_means$Height^2) - N * t * mean^2 - SS_A - SS_B
SS_AB
# SS_E(B) (B的误差平方和)  psu网址中没有写
# SS_EB <- sum(data_long$Height^2) - sum(plot_time_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2) - sum(4 * plot_time_means$Height^2)
SS_EB
# SS_T (总平方和)
SS_T <- sum(data_long_tree$Height^2) - N * t * mean^2
SS_T
# SS_A (plot的平方和)
SS_A <- t * sum(4 * plot_means$Height^2) - N * t * mean^2
SS_A
# SS_E(A)
SS_EA <- t * sum(plot_sample_means$Height^2) - t * sum(4 * plot_means$Height^2)
SS_EA
# SS_B
SS_B <- N * sum(time_means$Height^2) - N * t * mean^2
SS_B
# SS_AB
SS_AB <- sum(4 * plot_time_means$Height^2) - N * t * mean^2 - SS_A - SS_B
SS_AB
# SS_E(B) (B的误差平方和)  psu网址中没有写
# SS_EB <- sum(data_long$Height^2) - sum(plot_time_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2) - sum(4 * plot_time_means$Height^2)
SS_EB
# SS_T (总平方和)
SS_T <- sum(data_long_tree$Height^2) - N * t * mean^2
SS_T
# SS_A (plot的平方和)
SS_A <- t * sum(4 * plot_means$Height^2) - N * t * mean^2
SS_A
# SS_E(A)
SS_EA <- t * sum(plot_sample_means$Height^2) - t * sum(4 * plot_means$Height^2)
SS_EA
# SS_B
SS_B <- N * sum(time_means$Height^2) - N * t * mean^2
SS_B
# SS_AB
SS_AB <- sum(4 * plot_time_means$Height^2) - N * t * mean^2 - SS_A - SS_B
SS_AB
# SS_E(B) (B的误差平方和)  psu网址中没有写
# SS_EB <- sum(data_long$Height^2) - sum(plot_time_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2) - sum(4 * plot_time_means$Height^2)
SS_EB
SS_A + SS_B + SS_EA + SS_EB + SS_AB
# SS_E(B) (B的误差平方和)  psu网址中没有写
# SS_EB <- sum(data_long$Height^2) - sum(plot_time_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2) - sum(4 * plot_time_means$Height^2) - t * sum(4 * plot_means$Height^2) - N * sum(time_means$Height^2)
SS_EB
sum(4 * plot_time_means$Height^2)
t * sum(4 * plot_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2) - t * sum(4 * plot_means$Height^2) - N * sum(time_means$Height^2)
SS_EB
# N
N <- 16
# t
t <- nlevels(data_long_tree$time)
# a
a <- length(unique(data_long_tree$plot))
# bar{y}
mean <- mean(data_long_tree$Height)
# 计算 y_i.. (plot的均值)
plot_means <- aggregate(Height ~ plot, data = data_long_tree, FUN = base::mean)
# 计算 y_..k (time的均值)
time_means <- aggregate(Height ~ time, data = data_long_tree, FUN = base::mean)
# 计算 y_ij. (每个plot中每个样本点的均值)
plot_sample_means <- aggregate(Height ~ plot + sampleid, data = data_long_tree, FUN = base::mean)
# 计算y_i.k
plot_time_means <- aggregate(Height ~ plot + time, data = data_long_tree, FUN = base::mean)
# SS_T (总平方和)
SS_T <- sum(data_long_tree$Height^2) - N * t * mean^2
SS_T
# SS_A (plot的平方和)
SS_A <- t * sum(4 * plot_means$Height^2) - N * t * mean^2
SS_A
# SS_E(A)
SS_EA <- t * sum(plot_sample_means$Height^2) - t * sum(4 * plot_means$Height^2)
SS_EA
# SS_B
SS_B <- N * sum(time_means$Height^2) - N * t * mean^2
SS_B
# SS_AB
SS_AB <- sum(4 * plot_time_means$Height^2) - N * t * mean^2 - SS_A - SS_B
SS_AB
# SS_E(B) (B的误差平方和)  psu网址中没有写
# SS_EB <- sum(data_long$Height^2) - sum(plot_time_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2) - t * sum(4 * plot_means$Height^2) - N * sum(time_means$Height^2) - sum(4 * plot_time_means$Height^2)
SS_EB
SS_EB <- SS_T - SS_A - SS_B - SS_AB
SS_EB
# SS_E(B) (B的误差平方和)  psu网址中没有写
# SS_EB <- sum(data_long$Height^2) - sum(plot_time_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2) + t * sum(4 * plot_means$Height^2) - N * sum(time_means$Height^2) - sum(4 * plot_time_means$Height^2)
SS_EB
# SS_E(B) (B的误差平方和)  psu网址中没有写
# SS_EB <- sum(data_long$Height^2) - sum(plot_time_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2) + t * sum(4 * plot_means$Height^2) - t * sum(plot_sample_means$Height^2) - sum(4 * plot_time_means$Height^2)
SS_EB
# SS_E(B) (B的误差平方和)  psu网址中没有写
# SS_EB <- sum(data_long$Height^2) - sum(plot_time_means$Height^2)
SS_EB <- sum(data_long_tree$Height^2)  - sum(4 * plot_time_means$Height^2) - SS_EA
SS_EB
