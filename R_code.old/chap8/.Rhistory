install.packages("alr4")
library(alr4)
# 对模型进行曲率分析
curvature <- rms.curv(model)
summary_model <- summary(model)
cov_matrix <- summary_model$cov.unscaled
# 计算 Hessian 矩阵（协方差矩阵的逆）
hessian_matrix <- solve(cov_matrix)
# 计算 Hessian 矩阵（协方差矩阵的逆）
hessian_matrix <- solve(cov_matrix)
attr(model, "hessian") <- hessian_matrix
# 再次调用 rms.curv()
library(alr4)
curvature <- rms.curv(model)
View(model)
View(cov_matrix)
attr(model, "hessian") <- hessian_matrix
View(model)
attributes(model)
# 定义目标函数
objective_function <- function(params) {
b1 <- params[1]
b2 <- params[2]
b3 <- params[3]
b4 <- params[4]
with(data, sum((H - (1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4))^2))
}
# 使用 optim() 进行拟合并生成 Hessian
opt_result <- optim(
par = coef(model),
fn = objective_function,
hessian = TRUE
)
# 提取拟合参数和 Hessian 矩阵
fitted_params <- opt_result$par
hessian_matrix <- opt_result$hessian
# 检查结果
print(fitted_params)
print(hessian_matrix)
# 计算模型的固有非线性半径
intrinsic_curvature <- sqrt(sum(diag(hessian_matrix)^2))
print(intrinsic_curvature)
# 提取协方差矩阵
cov_matrix <- solve(hessian_matrix)
# 参数效应非线性
parameter_effect_curvature <- sqrt(sum(diag(cov_matrix)))
print(parameter_effect_curvature)
# 定义目标函数
objective_function <- function(params) {
b1 <- params[1]
b2 <- params[2]
b3 <- params[3]
b4 <- params[4]
with(data, sum((H - (1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4))^2))
}
# 使用 optim() 进行拟合
opt_result <- optim(
par = coef(model),
fn = objective_function,
hessian = TRUE
)
# 提取 Hessian
hessian_matrix <- opt_result$hessian
# 创建一个新的对象模拟 `nls` 模型并添加 Hessian
fitted_model <- model
attr(fitted_model, "hessian") <- hessian_matrix
# 调用 rms.curv()
curvature <- rms.curv(fitted_model)
?rms.curv
# 非线性回归模型拟合
my_model <- deriv3(
~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4,
namevec = c("b1", "b2", "b3", "b4"),  # 参数名称
function(b1, b2, b3, b4, hdo, D) NULL  # 创建函数模板
)
model <- nls(H ~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4, data = data, start = start)
curvature <- rms.curv(model)
# 非线性回归模型拟合
my_model <- deriv3(
~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4,
namevec = c("b1", "b2", "b3", "b4"),  # 参数名称
function(b1, b2, b3, b4, hdo, D) NULL  # 创建函数模板
)
model <- nls(
H ~ my_model(b1, b2, b3, b4, hdo, D),
data = data,
start = start
)
curvature <- rms.curv(model)
print(curvature)
summary(model)
rms.curv(model)
start <- getInitial(H ~ mySelfStart(hdo = hdo, D = D, b1, b2, b3, b4), data = data)
model <- nls(H ~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4, data = data, start = start)
summary(model)
model <- nls(H ~ my_model(b1, b2, b3, b4, hdo, D),data = data,start = start)
summary(model)
library(forestat)
library(dplyr)
library(MASS)
# 处理数据
data("birch")
pt <- unique(birch$plot)
hdo_list <- lapply(pt, function(p) {
max(birch[birch$plot == p, "H"], na.rm = TRUE)
})
# plot_counts <- table(birch$plot)
# hdo_repeated <- rep(unlist(hdo_list), times = plot_counts)
hdo_df <- data.frame(plot = pt, hdo = unlist(hdo_list))
data <- birch %>% left_join(hdo_df, by = "plot")
data <- data[!is.na(data$D) & !is.na(data$H), ]  # 移除 D 和 H 中的 NA
data <- data[order(data$D), ]  # 按照 D 升序排列数据
myInitial <- function(mCall, LHS, data, ...) {
D <- data[["D"]]
y <- data[["H"]]
hdo <- data[["hdo"]]
b1 <- max(y, na.rm = TRUE) / max(hdo, na.rm = TRUE)
b2 <- coef(lm(log(y) ~ log(hdo)))[2]  # 初始 b2，假设中性值
b3 <- 1 / mean(D, na.rm = TRUE)       # 初始 b3，控制增长速率
b4 <- sd(y, na.rm = TRUE) / mean(y, na.rm = TRUE)    # 初始 b4，假设线性效应
value <- c(b1 = b1, b2 = b2, b3 = b3, b4 = b4)
names(value) <- mCall[c("b1", "b2", "b3", "b4")]
return(value)
}
# 定义 selfStart 模型
mySelfStart <- selfStart(
~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4,
initial = myInitial,
parameters = c("b1", "b2", "b3", "b4")
)
start <- getInitial(H ~ mySelfStart(hdo = hdo, D = D, b1, b2, b3, b4), data = data)
start
# 非线性回归模型拟合
# 定义支持 deriv3 的非线性模型
my_model <- deriv3(~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4,
namevec = c("b1", "b2", "b3", "b4"),  # 参数名称
function(b1, b2, b3, b4, hdo, D) NULL  # 创建函数模板
)
model <- nls(H ~ my_model(b1, b2, b3, b4, hdo, D),data = data,start = start)
# model <- nls(H ~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4, data = data, start = start)
# 结果分析
summary(model)
rms.curv(model)
View(my_model)
model
attributes(model)
summary(model)
rms.curv(model)
model
RSS <- sum(residuals(model)^2)
TSS <- sum((data$H - mean(data$H))^2)
pseudo_R2 <- 1 - (RSS / TSS)
pseudo_R2
data$fitted_value <- predict(model)
library(ggplot2)
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = x, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "x (Predictor)",
y = "y (Response)"
) +
theme_classic()
data$residuals <- residuals(model)
ggplot(data, aes(x = x, y = residuals)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +  # 残差点
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1) +  # 零线
labs(
title = "残差图",
x = "x (Predictor)",
y = "Residuals"
) +
theme_classic()
data$fitted_value <- predict(model)
library(ggplot2)
ggplot(data, aes(x = D, y = H)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = D, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "x (Predictor)",
y = "y (Response)"
) +
theme_classic()
data$fitted_value <- predict(model)
library(ggplot2)
ggplot(data, aes(x = D, y = H)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = D, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "树高（D）",
y = "胸径（H）"
) +
theme_classic()
fitted_value
data$residuals <- residuals(model)
ggplot(data, aes(x = D, y = residuals)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +  # 残差点
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1) +  # 零线
labs(
title = "残差图",
x = "拟合值",
y = "残差"
) +
theme_classic()
library(ggplot2)
getwd()
setwd("D:\\大连理工大学\\R语言书稿\\Rforestat\\R_code\\chap8")
ggplot(data, aes(x = D, y = H)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = D, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "树高（D）",
y = "胸径（H）"
) +
theme_classic()
pdf("图8.4.pdf", width = 8, height = 6, family = "GB1")
ggplot(data, aes(x = D, y = H)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = D, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "树高（D）",
y = "胸径（H）"
) +
theme_classic()
dev.off()
data$residuals <- residuals(model)
pdf("图8.5.pdf", width = 8, height = 6, family = "GB1")
ggplot(data, aes(x = D, y = residuals)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +  # 残差点
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1) +  # 零线
labs(
title = "残差图",
x = "拟合值",
y = "残差"
) +
theme_classic()
dev.off()
# 生成数据
set.seed(123)
x <- seq(0, 100, 1)
y <- runif(1, 0, 20) * exp(runif(1, 0.005, 0.075) * x) + runif(101, 0, 5)
data = data.frame(x, y)
# selfStart函数
myinitial <- function(mCall, LHS, data, ...) {
xy <- sortedXyData(mCall[["x"]], LHS, data)
x <- xy[["x"]]
y <- xy[["y"]]
if (any(y <= 0)) stop("All values of 'y' must be positive to take the logarithm.")
y <- log(y)
aux <- coef(lm(y ~ x))
a <- exp(aux[1])  # 截距转换回原比例
b <- aux[2]       # 斜率
value <- c(a = a, b = b)
return(value)
}
myselfStart <- selfStart(
~ a * exp(b * x),
initial = myinitial,
parameters = c("a", "b")
)
# 获得初始值
start <- getInitial(y ~ myselfStart(x, a, b), data = data)
start
start <- as.list(start)
# 模型拟合
model <- nls(y ~ a*exp(b*x), data = data, start = c(a = start$a,b = start$b.x))
summary(model)
# 结果可视化
data$fitted_value <- predict(model)
library(ggplot2)
pdf("图8.2.pdf", width = 8, height = 6, family = "GB1")
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = x, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "x (Predictor)",
y = "y (Response)"
) +
theme_classic()
dev.off()
data$residuals <- residuals(model)
pdf("图8.3.pdf", width = 8, height = 6, family = "GB1")
ggplot(data, aes(x = x, y = residuals)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +  # 残差点
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1) +  # 零线
labs(
title = "残差图",
x = "拟合值",
y = "残差"
) +
theme_classic()
dev.off()
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = x, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "x (Predictor)",
y = "y (Response)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 16, face = "bold"),  # 标题字体大小
axis.title.x = element_text(size = 14),               # x 轴标签字体大小
axis.title.y = element_text(size = 14),               # y 轴标签字体大小
axis.text.x = element_text(size = 12),                # x 轴刻度字体大小
axis.text.y = element_text(size = 12),                # y 轴刻度字体大小
legend.title = element_text(size = 14),               # 图例标题字体大小
legend.text = element_text(size = 12)                 # 图例内容字体大小
)
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = x, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "x (Predictor)",
y = "y (Response)"
) +
theme_classic()
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = x, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "x (Predictor)",
y = "y (Response)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 24, face = "bold"),  # 标题字体大小
axis.title.x = element_text(size = 24),               # x 轴标签字体大小
axis.title.y = element_text(size = 24),               # y 轴标签字体大小
axis.text.x = element_text(size = 24),                # x 轴刻度字体大小
axis.text.y = element_text(size = 24),                # y 轴刻度字体大小
legend.title = element_text(size = 24),               # 图例标题字体大小
legend.text = element_text(size = 24)                 # 图例内容字体大小
)
dev.off()
# 生成数据
set.seed(123)
x <- seq(0, 100, 1)
y <- runif(1, 0, 20) * exp(runif(1, 0.005, 0.075) * x) + runif(101, 0, 5)
data = data.frame(x, y)
# selfStart函数
myinitial <- function(mCall, LHS, data, ...) {
xy <- sortedXyData(mCall[["x"]], LHS, data)
x <- xy[["x"]]
y <- xy[["y"]]
if (any(y <= 0)) stop("All values of 'y' must be positive to take the logarithm.")
y <- log(y)
aux <- coef(lm(y ~ x))
a <- exp(aux[1])  # 截距转换回原比例
b <- aux[2]       # 斜率
value <- c(a = a, b = b)
return(value)
}
myselfStart <- selfStart(
~ a * exp(b * x),
initial = myinitial,
parameters = c("a", "b")
)
# 获得初始值
start <- getInitial(y ~ myselfStart(x, a, b), data = data)
start
start <- as.list(start)
# 模型拟合
model <- nls(y ~ a*exp(b*x), data = data, start = c(a = start$a,b = start$b.x))
summary(model)
# 结果可视化
data$fitted_value <- predict(model)
library(ggplot2)
pdf("图8.2.pdf", width = 8, height = 6, family = "GB1")
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = x, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "x (Predictor)",
y = "y (Response)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 24, face = "bold"),  # 标题字体大小
axis.title.x = element_text(size = 24),               # x 轴标签字体大小
axis.title.y = element_text(size = 24),               # y 轴标签字体大小
axis.text.x = element_text(size = 24),                # x 轴刻度字体大小
axis.text.y = element_text(size = 24),                # y 轴刻度字体大小
legend.title = element_text(size = 24),               # 图例标题字体大小
legend.text = element_text(size = 24)                 # 图例内容字体大小
)
dev.off()
data$residuals <- residuals(model)
pdf("图8.3.pdf", width = 8, height = 6, family = "GB1")
ggplot(data, aes(x = x, y = residuals)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +  # 残差点
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1) +  # 零线
labs(
title = "残差图",
x = "拟合值",
y = "残差"
) +
theme_classic()+
theme(
plot.title = element_text(size = 24, face = "bold"),  # 标题字体大小
axis.title.x = element_text(size = 24),               # x 轴标签字体大小
axis.title.y = element_text(size = 24),               # y 轴标签字体大小
axis.text.x = element_text(size = 24),                # x 轴刻度字体大小
axis.text.y = element_text(size = 24),                # y 轴刻度字体大小
legend.title = element_text(size = 24),               # 图例标题字体大小
legend.text = element_text(size = 24)                 # 图例内容字体大小
)
dev.off()
library(forestat)
library(dplyr)
library(MASS)
# 处理数据
data("birch")
pt <- unique(birch$plot)
hdo_list <- lapply(pt, function(p) {
max(birch[birch$plot == p, "H"], na.rm = TRUE)
})
# plot_counts <- table(birch$plot)
# hdo_repeated <- rep(unlist(hdo_list), times = plot_counts)
hdo_df <- data.frame(plot = pt, hdo = unlist(hdo_list))
data <- birch %>% left_join(hdo_df, by = "plot")
data <- data[!is.na(data$D) & !is.na(data$H), ]  # 移除 D 和 H 中的 NA
data <- data[order(data$D), ]  # 按照 D 升序排列数据
myInitial <- function(mCall, LHS, data, ...) {
D <- data[["D"]]
y <- data[["H"]]
hdo <- data[["hdo"]]
b1 <- max(y, na.rm = TRUE) / max(hdo, na.rm = TRUE)
b2 <- coef(lm(log(y) ~ log(hdo)))[2]  # 初始 b2，假设中性值
b3 <- 1 / mean(D, na.rm = TRUE)       # 初始 b3，控制增长速率
b4 <- sd(y, na.rm = TRUE) / mean(y, na.rm = TRUE)    # 初始 b4，假设线性效应
value <- c(b1 = b1, b2 = b2, b3 = b3, b4 = b4)
names(value) <- mCall[c("b1", "b2", "b3", "b4")]
return(value)
}
# 定义 selfStart 模型
mySelfStart <- selfStart(
~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4,
initial = myInitial,
parameters = c("b1", "b2", "b3", "b4")
)
start <- getInitial(H ~ mySelfStart(hdo = hdo, D = D, b1, b2, b3, b4), data = data)
start
# 非线性回归模型拟合
# 定义支持 deriv3 的非线性模型
my_model <- deriv3(~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4,
namevec = c("b1", "b2", "b3", "b4"),  # 参数名称
function(b1, b2, b3, b4, hdo, D) NULL  # 创建函数模板
)
model <- nls(H ~ my_model(b1, b2, b3, b4, hdo, D),data = data,start = start)
# model <- nls(H ~ 1.3 + b1 * hdo^b2 * (1 - exp(-b3 * D))^b4, data = data, start = start)
# 结果分析
summary(model)
rms.curv(model)
# 伪R^2
RSS <- sum(residuals(model)^2)
TSS <- sum((data$H - mean(data$H))^2)
pseudo_R2 <- 1 - (RSS / TSS)
pseudo_R2
data$fitted_value <- predict(model)
library(ggplot2)
pdf("图8.4.pdf", width = 8, height = 6, family = "GB1")
ggplot(data, aes(x = D, y = H)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +
geom_line(aes(x = D, y = fitted_value), color = "red", size = 1) +
labs(
title = "模型拟合结果",
x = "树高（D）",
y = "胸径（H）"
) +
theme_classic()+
theme(
plot.title = element_text(size = 24, face = "bold"),  # 标题字体大小
axis.title.x = element_text(size = 24),               # x 轴标签字体大小
axis.title.y = element_text(size = 24),               # y 轴标签字体大小
axis.text.x = element_text(size = 24),                # x 轴刻度字体大小
axis.text.y = element_text(size = 24),                # y 轴刻度字体大小
legend.title = element_text(size = 24),               # 图例标题字体大小
legend.text = element_text(size = 24)                 # 图例内容字体大小
)
dev.off()
data$residuals <- residuals(model)
pdf("图8.5.pdf", width = 8, height = 6, family = "GB1")
ggplot(data, aes(x = D, y = residuals)) +
geom_point(color = "blue", size = 2, alpha = 0.7) +  # 残差点
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1) +  # 零线
labs(
title = "残差图",
x = "拟合值",
y = "残差"
) +
theme_classic()+
theme(
plot.title = element_text(size = 24, face = "bold"),  # 标题字体大小
axis.title.x = element_text(size = 24),               # x 轴标签字体大小
axis.title.y = element_text(size = 24),               # y 轴标签字体大小
axis.text.x = element_text(size = 24),                # x 轴刻度字体大小
axis.text.y = element_text(size = 24),                # y 轴刻度字体大小
legend.title = element_text(size = 24),               # 图例标题字体大小
legend.text = element_text(size = 24)                 # 图例内容字体大小
)
dev.off()
